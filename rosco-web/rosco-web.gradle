apply plugin: 'io.spinnaker.package'
apply plugin: "java-library"
apply plugin: "groovy"



//mainClassName = 'com.netflix.spinnaker.rosco.Main'
tasks.withType(Copy).all {
  duplicatesStrategy 'exclude'
}

task processPackageResources(type: Copy) {
  duplicatesStrategy = 'exclude'
}

dependencies {
  implementation project(":rosco-core")
  implementation project(":rosco-manifests")
  implementation "io.spinnaker.kork:kork-web"
  implementation "io.swagger:swagger-annotations"
  /*implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation "org.springframework.security:spring-security-core"
  compileOnly "org.springframework.boot:spring-boot-starter-actuator"*/
  implementation "io.spinnaker.kork:kork-config:2-0-SNAPSHOT"
  compileOnly 'org.apache.tomcat:tomcat-servlet-api:9.0.37'



  api "org.apache.groovy:groovy:4.0.9"
  implementation "io.spinnaker.kork:kork-artifacts"
  implementation "net.logstash.logback:logstash-logback-encoder:4.11"

  runtimeOnly "io.spinnaker.kork:kork-runtime:2-0-SNAPSHOT"

  testImplementation "com.jakewharton.retrofit:retrofit1-okhttp3-client:1.1.0"
  testImplementation "io.spinnaker.kork:kork-retrofit"
  testImplementation "org.spockframework:spock-core"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.objenesis:objenesis:3.2"
  testImplementation "org.springframework.boot:spring-boot-starter-web"
  testImplementation "org.springframework.boot:spring-boot-starter-actuator"
}

test {
  useJUnitPlatform()
}

ospackage {
  from('../halconfig/packer') {
    into '/opt/rosco/config/packer'
  }

  configurationFile('/opt/rosco/config/rosco.yml')
  configurationFile('/opt/rosco/config/packer/alicloud.json')
  configurationFile('/opt/rosco/config/packer/aws-chroot.json')
  configurationFile('/opt/rosco/config/packer/aws-ebs.json')
  configurationFile('/opt/rosco/config/packer/azure-linux.pkr.hcl')
  configurationFile('/opt/rosco/config/packer/gce.json')
  configurationFile('/opt/rosco/config/packer/huaweicloud.json')
  configurationFile('/opt/rosco/config/packer/oci.json')
  configurationFile('/opt/rosco/config/packer/tencentcloud.json')
  configurationFile('/opt/rosco/config/packer/install_packages.sh')

  from('../docker') {
    into "/opt/${project.applicationName}/docker"
  }
}

buildDeb {
  requires('unzip')
}

buildRpm {
  requires('unzip')
}
